/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardStaffManagementImport } from './routes/dashboard/staff-management'
import { Route as AuthLoginImport } from './routes/auth.login'
import { Route as DashboardcardRoutesRouteImport } from './routes/dashboard/(card-routes)/route'
import { Route as DashboardTrackingIndexImport } from './routes/dashboard/tracking/index'
import { Route as DashboardcardRoutesIndexImport } from './routes/dashboard/(card-routes)/index'
import { Route as DashboardTrackingIdImport } from './routes/dashboard/tracking/$id'
import { Route as DashboardcardRoutesInventoryImport } from './routes/dashboard/(card-routes)/inventory'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardStaffManagementRoute = DashboardStaffManagementImport.update({
  id: '/staff-management',
  path: '/staff-management',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardcardRoutesRouteRoute = DashboardcardRoutesRouteImport.update({
  id: '/(card-routes)',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardTrackingIndexRoute = DashboardTrackingIndexImport.update({
  id: '/tracking/',
  path: '/tracking/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardcardRoutesIndexRoute = DashboardcardRoutesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardcardRoutesRouteRoute,
} as any)

const DashboardTrackingIdRoute = DashboardTrackingIdImport.update({
  id: '/tracking/$id',
  path: '/tracking/$id',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardcardRoutesInventoryRoute =
  DashboardcardRoutesInventoryImport.update({
    id: '/inventory',
    path: '/inventory',
    getParentRoute: () => DashboardcardRoutesRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/(card-routes)': {
      id: '/dashboard/(card-routes)'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardcardRoutesRouteImport
      parentRoute: typeof DashboardRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/staff-management': {
      id: '/dashboard/staff-management'
      path: '/staff-management'
      fullPath: '/dashboard/staff-management'
      preLoaderRoute: typeof DashboardStaffManagementImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/(card-routes)/inventory': {
      id: '/dashboard/(card-routes)/inventory'
      path: '/inventory'
      fullPath: '/dashboard/inventory'
      preLoaderRoute: typeof DashboardcardRoutesInventoryImport
      parentRoute: typeof DashboardcardRoutesRouteImport
    }
    '/dashboard/tracking/$id': {
      id: '/dashboard/tracking/$id'
      path: '/tracking/$id'
      fullPath: '/dashboard/tracking/$id'
      preLoaderRoute: typeof DashboardTrackingIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/(card-routes)/': {
      id: '/dashboard/(card-routes)/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardcardRoutesIndexImport
      parentRoute: typeof DashboardcardRoutesRouteImport
    }
    '/dashboard/tracking/': {
      id: '/dashboard/tracking/'
      path: '/tracking'
      fullPath: '/dashboard/tracking'
      preLoaderRoute: typeof DashboardTrackingIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardcardRoutesRouteRouteChildren {
  DashboardcardRoutesInventoryRoute: typeof DashboardcardRoutesInventoryRoute
  DashboardcardRoutesIndexRoute: typeof DashboardcardRoutesIndexRoute
}

const DashboardcardRoutesRouteRouteChildren: DashboardcardRoutesRouteRouteChildren =
  {
    DashboardcardRoutesInventoryRoute: DashboardcardRoutesInventoryRoute,
    DashboardcardRoutesIndexRoute: DashboardcardRoutesIndexRoute,
  }

const DashboardcardRoutesRouteRouteWithChildren =
  DashboardcardRoutesRouteRoute._addFileChildren(
    DashboardcardRoutesRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardcardRoutesRouteRoute: typeof DashboardcardRoutesRouteRouteWithChildren
  DashboardStaffManagementRoute: typeof DashboardStaffManagementRoute
  DashboardTrackingIdRoute: typeof DashboardTrackingIdRoute
  DashboardTrackingIndexRoute: typeof DashboardTrackingIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardcardRoutesRouteRoute: DashboardcardRoutesRouteRouteWithChildren,
  DashboardStaffManagementRoute: DashboardStaffManagementRoute,
  DashboardTrackingIdRoute: DashboardTrackingIdRoute,
  DashboardTrackingIndexRoute: DashboardTrackingIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/': typeof DashboardcardRoutesIndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/staff-management': typeof DashboardStaffManagementRoute
  '/dashboard/inventory': typeof DashboardcardRoutesInventoryRoute
  '/dashboard/tracking/$id': typeof DashboardTrackingIdRoute
  '/dashboard/tracking': typeof DashboardTrackingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/staff-management': typeof DashboardStaffManagementRoute
  '/dashboard/inventory': typeof DashboardcardRoutesInventoryRoute
  '/dashboard/tracking/$id': typeof DashboardTrackingIdRoute
  '/dashboard': typeof DashboardcardRoutesIndexRoute
  '/dashboard/tracking': typeof DashboardTrackingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/dashboard/(card-routes)': typeof DashboardcardRoutesRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/staff-management': typeof DashboardStaffManagementRoute
  '/dashboard/(card-routes)/inventory': typeof DashboardcardRoutesInventoryRoute
  '/dashboard/tracking/$id': typeof DashboardTrackingIdRoute
  '/dashboard/(card-routes)/': typeof DashboardcardRoutesIndexRoute
  '/dashboard/tracking/': typeof DashboardTrackingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/'
    | '/auth/login'
    | '/dashboard/staff-management'
    | '/dashboard/inventory'
    | '/dashboard/tracking/$id'
    | '/dashboard/tracking'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/dashboard/staff-management'
    | '/dashboard/inventory'
    | '/dashboard/tracking/$id'
    | '/dashboard'
    | '/dashboard/tracking'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/(card-routes)'
    | '/auth/login'
    | '/dashboard/staff-management'
    | '/dashboard/(card-routes)/inventory'
    | '/dashboard/tracking/$id'
    | '/dashboard/(card-routes)/'
    | '/dashboard/tracking/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/(card-routes)",
        "/dashboard/staff-management",
        "/dashboard/tracking/$id",
        "/dashboard/tracking/"
      ]
    },
    "/dashboard/(card-routes)": {
      "filePath": "dashboard/(card-routes)/route.tsx",
      "parent": "/dashboard",
      "children": [
        "/dashboard/(card-routes)/inventory",
        "/dashboard/(card-routes)/"
      ]
    },
    "/auth/login": {
      "filePath": "auth.login.tsx"
    },
    "/dashboard/staff-management": {
      "filePath": "dashboard/staff-management.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/(card-routes)/inventory": {
      "filePath": "dashboard/(card-routes)/inventory.tsx",
      "parent": "/dashboard/(card-routes)"
    },
    "/dashboard/tracking/$id": {
      "filePath": "dashboard/tracking/$id.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/(card-routes)/": {
      "filePath": "dashboard/(card-routes)/index.tsx",
      "parent": "/dashboard/(card-routes)"
    },
    "/dashboard/tracking/": {
      "filePath": "dashboard/tracking/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
